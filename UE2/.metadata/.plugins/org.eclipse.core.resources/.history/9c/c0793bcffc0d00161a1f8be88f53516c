package swt6.orm.domain;

import java.util.List;

import org.hibernate.criterion.Restrictions;

import swt6.orm.data.IDataProvider;
import swt6.orm.data.hibernate.HibernateDataProvider;
import swt6.orm.domain.models.IEntity;
import swt6.orm.domain.models.LogbookEntry;
import swt6.orm.domain.models.Project;

public class JPAWorkLogManager extends WorkLogManager  {
	protected <T extends IEntity> IDataProvider<T> getDataProviderForType(){
		return new HibernateDataProvider<T>();
	}
   
    @Override
    public List<Project> getLeadingProjectsForEmployee(long employeeId) {
    	HibernateDataProvider<Project> dataProvider = (HibernateDataProvider<Project>) this.<Project>getDataProviderForType();
    	return dataProvider.getAllByRestriction(Project.class, Restrictions.eq("project.leader.id", employeeId));
    }

    @Override
    public List<LogbookEntry> getLogbookEntriesForEmployee(long employeeId) {
    	HibernateDataProvider<LogbookEntry> dataProvider = new HibernateDataProvider<LogbookEntry>();
    	return dataProvider.getAllByRestriction(LogbookEntry.class, Restrictions.eq("employee.id", employeeId));
    }
    
    @Override
    public List<LogbookEntry> getLogbookEntriesForPhase(String phase) {
    	HibernateDataProvider<LogbookEntry> dataProvider = new HibernateDataProvider<LogbookEntry>();
    	return dataProvider.getAllByRestriction(LogbookEntry.class, Restrictions.eq("logbookEntry.phase.name", phase));
    }
}