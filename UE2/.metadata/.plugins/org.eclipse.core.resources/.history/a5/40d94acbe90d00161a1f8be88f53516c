package swt6.orm.data.hibernate;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.SessionFactoryObserver;
import org.hibernate.boot.registry.StandardServiceRegistryBuilder;
import org.hibernate.cfg.Configuration;
import org.hibernate.service.ServiceRegistry;

public class HibernateUtil {

	private static SessionFactory sessionFactory;

	public static SessionFactory buildSessionFactory() {
		return buildSessionFactory("hibernate.cfg.xml");
	}

	@SuppressWarnings("serial")
	public static SessionFactory buildSessionFactory(String configFile) {
		// variant 1: simplest but deprecated
		// Configuration configuration =
		// new Configuration().configure(configFile);
		// return configuration.buildSessionFactory();

		// variant 2:
		// ServiceRegistry registry =
		// new StandardServiceRegistryBuilder().configure(configFile).build();
		// return
		// new MetadataSources(registry).buildMetadata().buildSessionFactory();

		// variant 3:
		Configuration configuration = new Configuration().configure(configFile);

		final ServiceRegistry serviceRegistry = new StandardServiceRegistryBuilder()
				.applySettings(configuration.getProperties()).build();

		configuration.setSessionFactoryObserver(new SessionFactoryObserver() {
			@Override
			public void sessionFactoryCreated(SessionFactory factory) {
			}

			@Override
			public void sessionFactoryClosed(SessionFactory factory) {
				StandardServiceRegistryBuilder.destroy(serviceRegistry);
			}
		});

		return configuration.buildSessionFactory(serviceRegistry);
	}

	// Creating a SessionFactory ist time consuming. This should
	// be done only once per database. SessionFactory is thread-safe.
	public static SessionFactory getSessionFactory() {
		if (sessionFactory == null)
			sessionFactory = buildSessionFactory();
		return sessionFactory;
	}

	public static void closeSessionFactory() {
		if (sessionFactory != null) {
			sessionFactory.close();
			sessionFactory = null;
		}
	}

	// Version 1: only works for a single threaded application
	private static Session session;

	public static Session getSession() {
		if (session == null)
			session = getSessionFactory().openSession();
		return session;
	}

	// Version 1:
	public static void closeSession() {
		if (session != null)
			session.close();
		session = null;
	}

	// Version 2:
	// Session is a lightweight component, but it isn't thread-safe.
	// Therefore, a separate connection has to be opened for each connection.
	// Hibernate 3 offers a tailor-made solution for this task:
	// getCurrentSession() delivers a different session for each thread.
	// Don't forget to set the property
	// hibernate.current_session_context_class = thread.
	// Moreover, the session is closed if the associated transaction is
	// committed or rollbacked.
	public static Session getCurrentSession() {
		return getSessionFactory().getCurrentSession();
	}
}
