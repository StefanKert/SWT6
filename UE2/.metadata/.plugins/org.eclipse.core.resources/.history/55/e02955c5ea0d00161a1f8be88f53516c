package swt6.orm.data.hibernate;

import java.util.List;
import org.hibernate.Criteria;
import org.hibernate.Session;
import org.hibernate.Transaction;
import swt6.orm.data.IDataProvider;
import swt6.orm.domain.IEntity;

public class HibernateDataProvider<T extends IEntity>  implements IDataProvider<T> {

	@Override
	public Long create(T entity) {
		Session session = HibernateUtil.getCurrentSession();

		Transaction tx = session.beginTransaction();
		session.save(entity);
		tx.commit();
		
		return entity.getId();
	}

	@SuppressWarnings("unchecked")
	@Override
	public T update(T entity) {
		Session session = HibernateUtil.getCurrentSession();

		Transaction tx = session.beginTransaction();
		entity = (T) session.merge(entity);
		tx.commit();

		return entity;
	}

	@Override
	public void delete(T entity) {
		Session session = HibernateUtil.getCurrentSession();

		Transaction tx = session.beginTransaction();
		session.delete(entity);
		tx.commit();
	}

	@SuppressWarnings("unchecked")
	@Override
	public T get(final Class<? extends T> type, long id) {
		T entity;
		HibernateUtil.executeWithTransaction((session) -> {
			entity = (T) session.get(type, id);
		});
		return entity;
	}

	@SuppressWarnings("unchecked")
	@Override
	public List<T> getAll(final Class<? extends T> type) {
		Session session = HibernateUtil.getCurrentSession();

		Transaction tx = session.beginTransaction();
		final Criteria crit = session.createCriteria(type);
		List<T> lst = crit.list();
		tx.commit();
		
		return lst;
	}
}
