package at.swt6.driveanalytics.dashboard;

import java.util.ArrayList;
import java.util.List;

import at.swt6.driveanalytics.dashboard.components.AbstractSensorComponent;
import at.swt6.driveanalytics.dashboard.components.DiscretValueSensorComponent;
import at.swt6.driveanalytics.dashboard.components.PercentageSensorComponent;
import at.swt6.driveanalytics.sensor.contracts.ISensor;
import at.swt6.driveanalytics.utils.Timer;
import javafx.event.EventHandler;
import javafx.scene.Node;
import javafx.scene.Scene;
import javafx.scene.control.Slider;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;
import javafx.stage.WindowEvent;

public class DashboardWindow {
	private Stage stage;
	private List<EventHandler<WindowEvent>> onCloseHandlers = new ArrayList<>();
	private DashboardController controller;
	private Slider slider;
	private VBox rootPane;
	private VBox componentContainer;
	
	public DashboardWindow(DashboardController controller){
		this.controller = controller;
		
		rootPane = new VBox();
		slider = new Slider();
		this.slider.setShowTickLabels(true);
		this.slider.setSnapToTicks(true);
		this.slider.setMajorTickUnit(1000);
		this.slider.setBlockIncrement(1000);
		this.slider.setValue(1000);
		this.slider.setMin(0);
		this.slider.setMax(1000);
		this.componentContainer = new VBox();
		this.componentContainer.setSpacing(10);
		this.rootPane.getChildren().add(slider);
		this.rootPane.getChildren().add(componentContainer);
	}
	
    private List<ISensor> sensorList = new ArrayList<>();
    private Timer timer;
    
    public DashboardController(){
        timer = new Timer();
        timer.addTimerListener(x -> {
            try {
                JavaFxUtils.runLater(() -> updateWidgets());
            }
            catch (Exception ex) {
                ex.printStackTrace();
            }
        });
        timer.start();
    }
    
    public VBox getComponentContainer() {
		return componentContainer;
	}

	public void setComponentContainer(VBox componentContainer) {
		this.componentContainer = componentContainer;
	}

	public Slider getIntervalSlider() {
		return intervalSlider;
	}

	public void setIntervalSlider(Slider intervalSlider) {
		this.intervalSlider = intervalSlider;
        this.intervalSlider.valueProperty().setValue(1000);
        this.intervalSlider.valueProperty().addListener((arg0, arg1, arg2) -> {
            timer.setInterval((int) intervalSlider.getValue());
        });
	}
    
    public void stop() {
        timer.stop();
    }

    private void updateWidgets() {
        for (ISensor sensor:sensorList) {
            Node widget = getWidgetById(sensor.getSensorId());
            if(widget != null)
            	((AbstractSensorComponent) widget).refresh();
        }
    }


    private Node getWidgetById(String id) {
        return componentContainer.getChildren().stream().filter(x -> x.getId().equals(id)).findFirst().orElse(null);
    }

    public void removeSensor(ISensor sensor) {
        Node node = getWidgetById(sensor.getSensorId());
        if(node != null){
            componentContainer.getChildren().remove(node);
        }
        sensorList.remove(sensor);
    }

    public void addSensor(ISensor sensor) {
        sensorList.add(sensor);
        AbstractSensorComponent sensorComponent = null;
        switch (sensor.getDataFormat()) {
            case PERCENT:
            	sensorComponent = new PercentageSensorComponent();
                break;
            case ABSOLUTE_VALUE_LONG:
            	sensorComponent = new DiscretValueSensorComponent();
                break;
        }       
        sensorComponent.setSensor(sensor);
        componentContainer.getChildren().add(sensorComponent);
    }
	
	public void show() {
		if (stage == null) {
			stage = new Stage();
			stage.setScene(new Scene(rootPane, 500, 500));
			stage.setMinWidth(250);
			stage.setMinHeight(250);
			stage.setOnCloseRequest(evt -> {
				onCloseHandlers.forEach(h -> h.handle(evt));
			});
			stage.setTitle("Drive Analytics Dashboard App");
		}
		stage.show();
	}

	public void close() {
		if (stage != null)
			stage.close();
	}


	public void addOnCloseEventHandler(EventHandler<WindowEvent> event) {
		onCloseHandlers.add(event);
	}
	
	public void removeOnCloseEventHandler(EventHandler<WindowEvent> event) {
		onCloseHandlers.remove(event);
	}
}
