package at.swt6.driveanalytics.dashboard;

import org.osgi.framework.BundleContext;
import org.osgi.framework.ServiceReference;
import org.osgi.util.tracker.ServiceTrackerCustomizer;

import at.swt6.drive.analytics.dashboard.utils.JavaFxUtils;
import at.swt6.driveanalytics.sensor.contracts.ISensorFactory;

public class SensorTrackerCustomizer implements ServiceTrackerCustomizer<ISensorFactory, ISensorFactory> {

	private static enum Action {
		ADDED, MODIFIED, REMOVED
	}

	private BundleContext context;
	private DashboardController controller;

	public SensorTrackerCustomizer(BundleContext context, DashboardController controller) {
		this.context = context;
		this.controller = controller;
	}

	@Override
	public ISensorFactory addingService(ServiceReference<ISensorFactory> serviceReference) {
		ISensorFactory factory = context.getService(serviceReference);
		controller.addSensor(factory.createSensor());
		return factory;
	}

	@Override
	public void modifiedService(ServiceReference<ISensorFactory> serviceReference, ISensorFactory factory) {
		controller.removeSensor(factory.createSensor());
		controller.addSensor(factory.createSensor());
	}

	@Override
	public void removedService(ServiceReference<ISensorFactory> serviceReference, ISensorFactory factory) {
		controller.removeSensor(factory.createSensor());
	}

	private void processEventInUIThread(final Runnable runnable, final ServiceReference<ISensorFactory> serviceReference,
			final ISensorFactory factory) {
		try {
			JavaFxUtils.runAndWait(() -> processEvent(action, serviceReference, factory));
		} catch (Exception ex) {
			ex.printStackTrace();
		}
	}
}
