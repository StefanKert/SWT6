package at.swt6.driveanalytics.dashboard;

import org.osgi.framework.BundleContext;
import org.osgi.framework.ServiceReference;
import org.osgi.util.tracker.ServiceTrackerCustomizer;

import at.swt6.drive.analytics.dashboard.utils.JavaFxUtils;
import at.swt6.driveanalytics.sensor.contracts.ISensorFactory;

public class SensorTrackerCustomizer implements ServiceTrackerCustomizer<ISensorFactory, ISensorFactory> {

	private static enum Action {
		ADDED, MODIFIED, REMOVED
	}

	private BundleContext context;
	private DashboardController controller;

	public SensorTrackerCustomizer(BundleContext context, DashboardController controller) {
		this.context = context;
		this.controller = controller;
	}

	@Override
	public ISensorFactory addingService(ServiceReference<ISensorFactory> serviceReference) {
		ISensorFactory factory = context.getService(serviceReference);
		JavaFxUtils.processEventInUIThread(() -> controller.addSensorFactory(factory));
		return factory;
	}

	@Override
	public void modifiedService(ServiceReference<ISensorFactory> serviceReference, ISensorFactory factory) {
		JavaFxUtils.processEventInUIThread(() -> {
			controller.removeSensorFactory(factory);
			controller.addSensorFactory(factory);
		});
	}

	@Override
	public void removedService(ServiceReference<ISensorFactory> serviceReference, ISensorFactory factory) {
		JavaFxUtils.processEventInUIThread(() -> {
			controller.removeSensorFactory(factory);
		});
	}
}
