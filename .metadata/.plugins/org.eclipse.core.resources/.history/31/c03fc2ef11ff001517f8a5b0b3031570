package at.swt6.driveanalytics.dashboard;

import java.util.ArrayList;
import java.util.List;

import at.swt6.drive.analytics.dashboard.utils.timer.Timer;
import at.swt6.driveanalytics.dashboard.components.FloatSensorComponent;
import at.swt6.driveanalytics.dashboard.components.PercentageSensorComponent;
import at.swt6.driveanalytics.dashboard.components.SensorComponent;
import at.swt6.driveanalytics.sensor.contracts.ISensor;
import at.swt6.driveanalytics.sensor.contracts.ISensorFactory;
import javafx.scene.Node;
import javafx.scene.control.Slider;
import javafx.scene.layout.VBox;

public class DashboardController{

    private VBox componentContainer;
	private Slider intervalSlider;
    private List<ISensorFactory> sensorFactoryList = new ArrayList<>();
    private Timer timer;

    
    public DashboardController(){
        timer = new Timer();/*
        intervalSlider.valueProperty().setValue(1000);
        //timer should refresh the widgets
        timer.addTimerListener(x -> {
            try {
                JavaFxUtils.runLater(() -> updateWidgets());
            }
            catch (Exception ex) {
                ex.printStackTrace();
            }
        });

        //bind interval slider to interval property
        intervalSlider.valueProperty().addListener((arg0, arg1, arg2) -> {
            timer.setInterval((int) intervalSlider.getValue());
        });

        timer.start();*/
    }
    
    public VBox getComponentContainer() {
		return componentContainer;
	}

	public void setComponentContainer(VBox componentContainer) {
		this.componentContainer = componentContainer;
	}

	public Slider getIntervalSlider() {
		return intervalSlider;
	}

	public void setIntervalSlider(Slider intervalSlider) {
		this.intervalSlider = intervalSlider;
	}
    
    public void stop() {
        timer.stop();
    }

    private void updateWidgets() {
        for (ISensor sensor:sensorList) {
            Node widget = getWidgetById(sensor.getSensorId());
            ((SensorComponent) widget).refresh();
        }
    }


    private Node getWidgetById(String id) {
        return componentContainer.getChildren().stream().filter(x -> x.getId().equals(id))
                .findFirst().orElse(null);
    }

    public void removeSensorFactory(ISensorFactory sensorFactory) {
        Node node = getWidgetById(sensor.getSensorId());
        if(node != null){
            componentContainer.getChildren().remove(node);
        }
        sensorFactoryList.remove(sensor);
    }

    public void addSensorFactory(ISensorFactory sensorFactory) {
        sensorFactoryList.add(sensorFactory);
        SensorComponent sensorComponent = null;
        switch (sensor.getDataFormat()) {
            case PERCENT:
            	sensorComponent = new PercentageSensorComponent();
                break;
            case ABSOLUTE_VALUE_LONG:
            	sensorComponent = new FloatSensorComponent();
                break;
        }       
        sensorComponent.setSensor(sensor);
        componentContainer.getChildren().add(sensorComponent);
    }
}